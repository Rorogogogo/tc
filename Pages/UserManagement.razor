@page "/user_management"
@using tc.Data
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Forms
@using System.Globalization
@using Radzen
@inject UserManager<ApplicationUserEntity> UserManager
@inject RoleManager<IdentityRole<Guid>> RoleManager
@inject ApplicationDbContext DbContext
@inject NavigationManager Navigation
@inject NotificationService NotificationService

@attribute [Authorize(Roles = "Admin")]
<h3>User Management</h3>

@if (users == null)
{
    <p>Loading...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>UserName</th>
                <th>Email</th>
                <th>Email Confirmed</th>
                <th>Role</th>
                <th>Create Date</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in users.Where(u => u.DeleteDate == null))
            {
                var role = userRoles.ContainsKey(user.Id.ToString()) ? userRoles[user.Id.ToString()] : "null";
                <tr>
                    <td>@user.UserName</td>
                    <td>@user.Email</td>
                    <td>@user.EmailConfirmed</td>
                    <td>@role</td>
                    <td>@user.CreateDate.ToString("yyyy-MM-dd HH:mm:ss", CultureInfo.InvariantCulture)</td>
                    <td>@(user.DeleteDate == null ? "Normal" : "Deleted")</td>
                    <td>
                        @if (role != "Admin")
                        {
                            <button class="btn btn-primary" @onclick="() => EditUser(user)">Edit</button>
                            <button class="btn btn-danger" @onclick="() => ConfirmDelete(user)">Delete</button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>

    @if (users.Any(u => u.DeleteDate != null))
    {
        <h4>Deleted Users</h4>
        <table class="table">
            <thead>
                <tr>
                    <th>UserName</th>
                    <th>Email</th>
                    <th>Email Confirmed</th>
                    <th>Role</th>
                    <th>Create Date</th>
                    <th>Status</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in users.Where(u => u.DeleteDate != null))
                {
                    var role = userRoles.ContainsKey(user.Id.ToString()) ? userRoles[user.Id.ToString()] : "null";
                    <tr>
                        <td>@user.UserName</td>
                        <td>@user.Email</td>
                        <td>@user.EmailConfirmed</td>
                        <td>@role</td>
                        <td>@user.CreateDate.ToString("yyyy-MM-dd HH:mm:ss", CultureInfo.InvariantCulture)</td>
                        <td class="text-danger">Deleted</td>
                        <td>
                            <button class="btn btn-danger" @onclick="() => ConfirmDelete(user, true)">Delete Permanently</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@if (isEditModalVisible)
{
    <EditForm Model="editingUser" OnValidSubmit="HandleEditUser">
        <DataAnnotationsValidator />
        <div class="modal show d-block" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Edit User</h5>
                        <button type="button" class="btn-close" @onclick="() => isEditModalVisible = false"></button>
                    </div>
                    <div class="modal-body">
                        <div class="mb-3">
                            <label for="UserName" class="form-label">UserName</label>
                            <InputText id="UserName" class="form-control" @bind-Value="editingUser.UserName" />
                        </div>
                        <div class="mb-3">
                            <label for="Email" class="form-label">Email</label>
                            <InputText id="Email" class="form-control" @bind-Value="editingUser.Email" />
                        </div>
                        <div class="mb-3">
                            <label for="Role" class="form-label">Role</label>
                            <InputSelect id="Role" class="form-control" @bind-Value="editingRole">
                                @foreach (var role in roles)
                                {
                                    <option value="@role.Name">@role.Name</option>
                                }
                            </InputSelect>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="() => isEditModalVisible = false">Close</button>
                        <button type="submit" class="btn btn-primary">Save changes</button>
                    </div>
                </div>
            </div>
        </div>
    </EditForm>
}

@if (isDeleteModalVisible)
{
    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Delete</h5>
                    <button type="button" class="btn-close" @onclick="() => isDeleteModalVisible = false"></button>
                </div>
                <div class="modal-body">
                    <p>@deleteMessage</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => isDeleteModalVisible = false">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="HandleDeleteUser">Delete</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<ApplicationUserEntity> users;
    private Dictionary<string, string> userRoles = new();
    private ApplicationUserEntity editingUser;
    private string editingRole;
    private bool isEditModalVisible = false;
    private bool isDeleteModalVisible = false;
    private ApplicationUserEntity deletingUser;
    private bool isPermanentDelete = false;
    private string deleteMessage;
    private List<IdentityRole<Guid>> roles;


    protected override async Task OnInitializedAsync()
    {
        await ReloadUsers();
        roles = await RoleManager.Roles.OrderBy(r => r.Name).ToListAsync();
    }

    private void EditUser(ApplicationUserEntity user)
    {
        editingUser = user;
        editingRole = userRoles.ContainsKey(user.Id.ToString()) ? userRoles[user.Id.ToString()] : "null";
        isEditModalVisible = true;
    }

    private async Task HandleEditUser()
    {
        try
        {
            var currentRole = userRoles[editingUser.Id.ToString()];
            if (currentRole != editingRole)
            {
                if (!string.IsNullOrEmpty(currentRole))
                {
                    await UserManager.RemoveFromRoleAsync(editingUser, currentRole);
                }
                if (!string.IsNullOrEmpty(editingRole))
                {
                    await UserManager.AddToRoleAsync(editingUser, editingRole);
                }
            }

            DbContext.Update(editingUser);
            await DbContext.SaveChangesAsync();

            isEditModalVisible = false;

            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "User Updated",
                Detail = "The user has been successfully updated.",
                Duration = 4000
            });

            await ReloadUsers();
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Update Failed",
                Detail = $"An error occurred while updating the user: {ex.Message}",
                Duration = 4000
            });
        }
    }

    private void ConfirmDelete(ApplicationUserEntity user, bool permanentDelete = false)
    {
        deletingUser = user;
        isPermanentDelete = permanentDelete;
        deleteMessage = isPermanentDelete ? "Are you sure you want to permanently delete this user?" : "Are you sure you want to delete this user?";
        isDeleteModalVisible = true;
    }

    private async Task HandleDeleteUser()
    {
        try
        {
            if (isPermanentDelete)
            {
                DbContext.Users.Remove(deletingUser);
            }
            else
            {
                deletingUser.DeleteDate = DateTime.UtcNow.AddHours(10);
                DbContext.Update(deletingUser);
            }

            await DbContext.SaveChangesAsync();

            isDeleteModalVisible = false;

            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "User Deleted",
                Detail = isPermanentDelete ? "The user has been permanently deleted." : "The user has been deleted successfully.",
                Duration = 4000
            });

            await ReloadUsers();
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Deletion Failed",
                Detail = $"An error occurred while deleting the user: {ex.Message}",
                Duration = 4000
            });
        }
    }

    private async Task ReloadUsers()
    {
        users = await DbContext.Users
            .OrderBy(u => u.CreateDate)
            .ToListAsync();

        foreach (var user in users)
        {
            var roles = await UserManager.GetRolesAsync(user);
            if (roles.Any())
            {
                userRoles[user.Id.ToString()] = roles.First();
            }
        }
    }
}
