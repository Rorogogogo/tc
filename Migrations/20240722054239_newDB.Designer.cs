// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using tc.Data;

#nullable disable

namespace tc.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240722054239_newDB")]
    partial class newDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ActivityTypeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ActivityName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("EditDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("ActivityTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b109780a-988a-4186-b95e-a5916137f7eb"),
                            ActivityName = "Standard1",
                            CreateDate = new DateTime(2024, 7, 22, 15, 42, 39, 376, DateTimeKind.Local).AddTicks(8570)
                        },
                        new
                        {
                            Id = new Guid("06e32f25-a796-41bf-a3e6-960729c2d5a2"),
                            ActivityName = "Standard2",
                            CreateDate = new DateTime(2024, 7, 22, 15, 42, 39, 376, DateTimeKind.Local).AddTicks(8570)
                        });
                });

            modelBuilder.Entity("ApplicationUserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("EditDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("AppointmentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ActivityTypeId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("EditDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("VenueId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityTypeId");

                    b.HasIndex("UserId");

                    b.HasIndex("VenueId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("93f56303-eaec-4f81-8a0a-6f8ddbbde71e"),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("d00c788d-d745-4828-bf8c-b096c56553b0"),
                            Name = "Standard",
                            NormalizedName = "STANDARD"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("VenueActivitySetupEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("EditDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("OffSceneOffset")
                        .HasColumnType("int");

                    b.Property<int>("OnSceneOffset")
                        .HasColumnType("int");

                    b.Property<string>("Scene")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("VenueId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.ToTable("VenueActivitySetups");
                });

            modelBuilder.Entity("VenueEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("EditDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("VenueName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Venues");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9a595615-00d8-422c-acda-a4da2d8588bb"),
                            CreateDate = new DateTime(2024, 7, 22, 15, 42, 39, 376, DateTimeKind.Local).AddTicks(8320),
                            VenueName = "Venue1"
                        },
                        new
                        {
                            Id = new Guid("91653fce-531c-4425-9cda-b5a8bc3f3b90"),
                            CreateDate = new DateTime(2024, 7, 22, 15, 42, 39, 376, DateTimeKind.Local).AddTicks(8390),
                            VenueName = "Venue2"
                        },
                        new
                        {
                            Id = new Guid("8dbb6163-a4af-4085-bdc1-42e17b1074c5"),
                            CreateDate = new DateTime(2024, 7, 22, 15, 42, 39, 376, DateTimeKind.Local).AddTicks(8400),
                            VenueName = "Venue3"
                        },
                        new
                        {
                            Id = new Guid("e917b31a-3c53-48c4-994b-f1dc74f6ba58"),
                            CreateDate = new DateTime(2024, 7, 22, 15, 42, 39, 376, DateTimeKind.Local).AddTicks(8410),
                            VenueName = "Venue4"
                        },
                        new
                        {
                            Id = new Guid("7438cbef-f0c0-43b2-bef1-a5c57b09d895"),
                            CreateDate = new DateTime(2024, 7, 22, 15, 42, 39, 376, DateTimeKind.Local).AddTicks(8420),
                            VenueName = "Venue5"
                        },
                        new
                        {
                            Id = new Guid("a8de4114-0136-4f20-a86b-658c084d3c8f"),
                            CreateDate = new DateTime(2024, 7, 22, 15, 42, 39, 376, DateTimeKind.Local).AddTicks(8440),
                            VenueName = "Venue6"
                        },
                        new
                        {
                            Id = new Guid("213ed478-72fa-402d-86fc-cb124ca7f493"),
                            CreateDate = new DateTime(2024, 7, 22, 15, 42, 39, 376, DateTimeKind.Local).AddTicks(8450),
                            VenueName = "Venue7"
                        },
                        new
                        {
                            Id = new Guid("b08534b6-5a5c-48a3-ac71-286712f32c93"),
                            CreateDate = new DateTime(2024, 7, 22, 15, 42, 39, 376, DateTimeKind.Local).AddTicks(8460),
                            VenueName = "Venue8"
                        },
                        new
                        {
                            Id = new Guid("dfe5487d-a335-475b-9d40-b65f41d22129"),
                            CreateDate = new DateTime(2024, 7, 22, 15, 42, 39, 376, DateTimeKind.Local).AddTicks(8470),
                            VenueName = "Venue9"
                        },
                        new
                        {
                            Id = new Guid("b67f73a1-8416-488c-a21c-0f6bb5d694f8"),
                            CreateDate = new DateTime(2024, 7, 22, 15, 42, 39, 376, DateTimeKind.Local).AddTicks(8480),
                            VenueName = "Venue10"
                        },
                        new
                        {
                            Id = new Guid("946bbaea-f379-4bf0-95a6-97be7c5aacd8"),
                            CreateDate = new DateTime(2024, 7, 22, 15, 42, 39, 376, DateTimeKind.Local).AddTicks(8500),
                            VenueName = "Venue11"
                        },
                        new
                        {
                            Id = new Guid("8ac0830f-bb35-4c82-a907-038b6f1af47f"),
                            CreateDate = new DateTime(2024, 7, 22, 15, 42, 39, 376, DateTimeKind.Local).AddTicks(8510),
                            VenueName = "Venue12"
                        },
                        new
                        {
                            Id = new Guid("0ef8afde-ec4b-4577-8014-81731e486d53"),
                            CreateDate = new DateTime(2024, 7, 22, 15, 42, 39, 376, DateTimeKind.Local).AddTicks(8520),
                            VenueName = "Venue13"
                        },
                        new
                        {
                            Id = new Guid("e9d95cfe-d5ed-43b6-87d7-b2509f12b5ec"),
                            CreateDate = new DateTime(2024, 7, 22, 15, 42, 39, 376, DateTimeKind.Local).AddTicks(8530),
                            VenueName = "Venue14"
                        },
                        new
                        {
                            Id = new Guid("d0ec3db0-90c6-4ef6-9681-6346135c329b"),
                            CreateDate = new DateTime(2024, 7, 22, 15, 42, 39, 376, DateTimeKind.Local).AddTicks(8540),
                            VenueName = "Venue15"
                        },
                        new
                        {
                            Id = new Guid("e535ae14-01e1-4d5e-a29a-abcec3840881"),
                            CreateDate = new DateTime(2024, 7, 22, 15, 42, 39, 376, DateTimeKind.Local).AddTicks(8550),
                            VenueName = "Venue16"
                        });
                });

            modelBuilder.Entity("AppointmentEntity", b =>
                {
                    b.HasOne("ActivityTypeEntity", "ActivityType")
                        .WithMany()
                        .HasForeignKey("ActivityTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VenueEntity", "Venue")
                        .WithMany()
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActivityType");

                    b.Navigation("User");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("ApplicationUserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("ApplicationUserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("ApplicationUserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
