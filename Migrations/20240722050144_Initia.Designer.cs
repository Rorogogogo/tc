// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using tc.Data;

#nullable disable

namespace tc.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240722050144_Initia")]
    partial class Initia
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ActivityTypeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ActivityName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("EditDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("ActivityTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c4e7d93c-0ece-4610-bda6-1a82c2a21158"),
                            ActivityName = "Standard1",
                            CreateDate = new DateTime(2024, 7, 22, 15, 1, 44, 299, DateTimeKind.Local).AddTicks(3530)
                        },
                        new
                        {
                            Id = new Guid("0312c77a-2558-45a0-a081-3786243a18b7"),
                            ActivityName = "Standard2",
                            CreateDate = new DateTime(2024, 7, 22, 15, 1, 44, 299, DateTimeKind.Local).AddTicks(3540)
                        });
                });

            modelBuilder.Entity("ApplicationUserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("EditDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("AppointmentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ActivityTypeId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("EditDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("VenueId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityTypeId");

                    b.HasIndex("UserId");

                    b.HasIndex("VenueId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("1f261c82-bbab-4dc9-b394-915e18dbf581"),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("6aee5453-b064-4760-b0d9-47bade609c82"),
                            Name = "Standard",
                            NormalizedName = "STANDARD"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("VenueActivitySetupEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("EditDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("OffSceneOffset")
                        .HasColumnType("int");

                    b.Property<int>("OnSceneOffset")
                        .HasColumnType("int");

                    b.Property<string>("Scene")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("VenueId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.ToTable("VenueActivitySetups");
                });

            modelBuilder.Entity("VenueEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("EditDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("VenueName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Venues");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4b491c29-b94b-4902-8545-9114bb2646e1"),
                            CreateDate = new DateTime(2024, 7, 22, 15, 1, 44, 299, DateTimeKind.Local).AddTicks(3270),
                            VenueName = "Venue1"
                        },
                        new
                        {
                            Id = new Guid("79a898bc-b18b-475b-9042-50d03753ac53"),
                            CreateDate = new DateTime(2024, 7, 22, 15, 1, 44, 299, DateTimeKind.Local).AddTicks(3330),
                            VenueName = "Venue2"
                        },
                        new
                        {
                            Id = new Guid("eb945727-d571-4128-a72f-0593a5f8d94f"),
                            CreateDate = new DateTime(2024, 7, 22, 15, 1, 44, 299, DateTimeKind.Local).AddTicks(3350),
                            VenueName = "Venue3"
                        },
                        new
                        {
                            Id = new Guid("2dfd9366-ef76-4186-af0f-b345a0d3f35c"),
                            CreateDate = new DateTime(2024, 7, 22, 15, 1, 44, 299, DateTimeKind.Local).AddTicks(3360),
                            VenueName = "Venue4"
                        },
                        new
                        {
                            Id = new Guid("ea861fad-16c1-46c3-ae2b-f98bb77d5278"),
                            CreateDate = new DateTime(2024, 7, 22, 15, 1, 44, 299, DateTimeKind.Local).AddTicks(3370),
                            VenueName = "Venue5"
                        },
                        new
                        {
                            Id = new Guid("07e17499-b6fb-45a4-9a40-5075222c773a"),
                            CreateDate = new DateTime(2024, 7, 22, 15, 1, 44, 299, DateTimeKind.Local).AddTicks(3390),
                            VenueName = "Venue6"
                        },
                        new
                        {
                            Id = new Guid("98608c7e-9593-4113-93b9-4f11f9170e0e"),
                            CreateDate = new DateTime(2024, 7, 22, 15, 1, 44, 299, DateTimeKind.Local).AddTicks(3400),
                            VenueName = "Venue7"
                        },
                        new
                        {
                            Id = new Guid("27623715-3646-4941-9ce8-40bfd1761158"),
                            CreateDate = new DateTime(2024, 7, 22, 15, 1, 44, 299, DateTimeKind.Local).AddTicks(3410),
                            VenueName = "Venue8"
                        },
                        new
                        {
                            Id = new Guid("04b3fa98-69c6-4434-b487-4b671242f7c1"),
                            CreateDate = new DateTime(2024, 7, 22, 15, 1, 44, 299, DateTimeKind.Local).AddTicks(3420),
                            VenueName = "Venue9"
                        },
                        new
                        {
                            Id = new Guid("87737ae3-860f-4f14-95a4-db29ddab5b3b"),
                            CreateDate = new DateTime(2024, 7, 22, 15, 1, 44, 299, DateTimeKind.Local).AddTicks(3450),
                            VenueName = "Venue10"
                        },
                        new
                        {
                            Id = new Guid("f56aa909-4da5-4390-a5d0-79c74f017397"),
                            CreateDate = new DateTime(2024, 7, 22, 15, 1, 44, 299, DateTimeKind.Local).AddTicks(3460),
                            VenueName = "Venue11"
                        },
                        new
                        {
                            Id = new Guid("e571e407-d989-444a-8dd4-d1f25df6443a"),
                            CreateDate = new DateTime(2024, 7, 22, 15, 1, 44, 299, DateTimeKind.Local).AddTicks(3470),
                            VenueName = "Venue12"
                        },
                        new
                        {
                            Id = new Guid("e59debe1-f332-4f16-a051-8157d266c2ee"),
                            CreateDate = new DateTime(2024, 7, 22, 15, 1, 44, 299, DateTimeKind.Local).AddTicks(3490),
                            VenueName = "Venue13"
                        },
                        new
                        {
                            Id = new Guid("ee604752-61d2-49ac-a06d-87c6397cf25c"),
                            CreateDate = new DateTime(2024, 7, 22, 15, 1, 44, 299, DateTimeKind.Local).AddTicks(3500),
                            VenueName = "Venue14"
                        },
                        new
                        {
                            Id = new Guid("b60b7146-bdbe-483e-80fd-bc24a2b9dcc7"),
                            CreateDate = new DateTime(2024, 7, 22, 15, 1, 44, 299, DateTimeKind.Local).AddTicks(3510),
                            VenueName = "Venue15"
                        },
                        new
                        {
                            Id = new Guid("8a08edd5-576a-4bb3-a652-590cc3e5ad7f"),
                            CreateDate = new DateTime(2024, 7, 22, 15, 1, 44, 299, DateTimeKind.Local).AddTicks(3520),
                            VenueName = "Venue16"
                        });
                });

            modelBuilder.Entity("AppointmentEntity", b =>
                {
                    b.HasOne("ActivityTypeEntity", "ActivityType")
                        .WithMany()
                        .HasForeignKey("ActivityTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VenueEntity", "Venue")
                        .WithMany()
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActivityType");

                    b.Navigation("User");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("ApplicationUserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("ApplicationUserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("ApplicationUserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
